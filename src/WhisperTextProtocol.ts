/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.6
 * source: WhisperTextProtocol.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace textsecure {
    export class WhisperMessage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ephemeralKey?: Uint8Array;
            counter?: number;
            previousCounter?: number;
            ciphertext?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ephemeralKey" in data && data.ephemeralKey != undefined) {
                    this.ephemeralKey = data.ephemeralKey;
                }
                if ("counter" in data && data.counter != undefined) {
                    this.counter = data.counter;
                }
                if ("previousCounter" in data && data.previousCounter != undefined) {
                    this.previousCounter = data.previousCounter;
                }
                if ("ciphertext" in data && data.ciphertext != undefined) {
                    this.ciphertext = data.ciphertext;
                }
            }
        }
        get ephemeralKey() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set ephemeralKey(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_ephemeralKey() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get counter() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set counter(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_counter() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get previousCounter() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set previousCounter(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_previousCounter() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get ciphertext() {
            return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array(0)) as Uint8Array;
        }
        set ciphertext(value: Uint8Array) {
            pb_1.Message.setField(this, 4, value);
        }
        get has_ciphertext() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            ephemeralKey?: Uint8Array;
            counter?: number;
            previousCounter?: number;
            ciphertext?: Uint8Array;
        }): WhisperMessage {
            const message = new WhisperMessage({});
            if (data.ephemeralKey != null) {
                message.ephemeralKey = data.ephemeralKey;
            }
            if (data.counter != null) {
                message.counter = data.counter;
            }
            if (data.previousCounter != null) {
                message.previousCounter = data.previousCounter;
            }
            if (data.ciphertext != null) {
                message.ciphertext = data.ciphertext;
            }
            return message;
        }
        toObject() {
            const data: {
                ephemeralKey?: Uint8Array;
                counter?: number;
                previousCounter?: number;
                ciphertext?: Uint8Array;
            } = {};
            if (this.ephemeralKey != null) {
                data.ephemeralKey = this.ephemeralKey;
            }
            if (this.counter != null) {
                data.counter = this.counter;
            }
            if (this.previousCounter != null) {
                data.previousCounter = this.previousCounter;
            }
            if (this.ciphertext != null) {
                data.ciphertext = this.ciphertext;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_ephemeralKey && this.ephemeralKey.length)
                writer.writeBytes(1, this.ephemeralKey);
            if (this.has_counter)
                writer.writeUint32(2, this.counter);
            if (this.has_previousCounter)
                writer.writeUint32(3, this.previousCounter);
            if (this.has_ciphertext && this.ciphertext.length)
                writer.writeBytes(4, this.ciphertext);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WhisperMessage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WhisperMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ephemeralKey = reader.readBytes();
                        break;
                    case 2:
                        message.counter = reader.readUint32();
                        break;
                    case 3:
                        message.previousCounter = reader.readUint32();
                        break;
                    case 4:
                        message.ciphertext = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WhisperMessage {
            return WhisperMessage.deserialize(bytes);
        }
    }
    export class PreKeyWhisperMessage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            registrationId?: number;
            preKeyId?: number;
            signedPreKeyId?: number;
            baseKey?: Uint8Array;
            identityKey?: Uint8Array;
            message?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("registrationId" in data && data.registrationId != undefined) {
                    this.registrationId = data.registrationId;
                }
                if ("preKeyId" in data && data.preKeyId != undefined) {
                    this.preKeyId = data.preKeyId;
                }
                if ("signedPreKeyId" in data && data.signedPreKeyId != undefined) {
                    this.signedPreKeyId = data.signedPreKeyId;
                }
                if ("baseKey" in data && data.baseKey != undefined) {
                    this.baseKey = data.baseKey;
                }
                if ("identityKey" in data && data.identityKey != undefined) {
                    this.identityKey = data.identityKey;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get registrationId() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set registrationId(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get has_registrationId() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get preKeyId() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set preKeyId(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_preKeyId() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get signedPreKeyId() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set signedPreKeyId(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get has_signedPreKeyId() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get baseKey() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set baseKey(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_baseKey() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get identityKey() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set identityKey(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_identityKey() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array(0)) as Uint8Array;
        }
        set message(value: Uint8Array) {
            pb_1.Message.setField(this, 4, value);
        }
        get has_message() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            registrationId?: number;
            preKeyId?: number;
            signedPreKeyId?: number;
            baseKey?: Uint8Array;
            identityKey?: Uint8Array;
            message?: Uint8Array;
        }): PreKeyWhisperMessage {
            const message = new PreKeyWhisperMessage({});
            if (data.registrationId != null) {
                message.registrationId = data.registrationId;
            }
            if (data.preKeyId != null) {
                message.preKeyId = data.preKeyId;
            }
            if (data.signedPreKeyId != null) {
                message.signedPreKeyId = data.signedPreKeyId;
            }
            if (data.baseKey != null) {
                message.baseKey = data.baseKey;
            }
            if (data.identityKey != null) {
                message.identityKey = data.identityKey;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                registrationId?: number;
                preKeyId?: number;
                signedPreKeyId?: number;
                baseKey?: Uint8Array;
                identityKey?: Uint8Array;
                message?: Uint8Array;
            } = {};
            if (this.registrationId != null) {
                data.registrationId = this.registrationId;
            }
            if (this.preKeyId != null) {
                data.preKeyId = this.preKeyId;
            }
            if (this.signedPreKeyId != null) {
                data.signedPreKeyId = this.signedPreKeyId;
            }
            if (this.baseKey != null) {
                data.baseKey = this.baseKey;
            }
            if (this.identityKey != null) {
                data.identityKey = this.identityKey;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_registrationId)
                writer.writeUint32(5, this.registrationId);
            if (this.has_preKeyId)
                writer.writeUint32(1, this.preKeyId);
            if (this.has_signedPreKeyId)
                writer.writeUint32(6, this.signedPreKeyId);
            if (this.has_baseKey && this.baseKey.length)
                writer.writeBytes(2, this.baseKey);
            if (this.has_identityKey && this.identityKey.length)
                writer.writeBytes(3, this.identityKey);
            if (this.has_message && this.message.length)
                writer.writeBytes(4, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PreKeyWhisperMessage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PreKeyWhisperMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 5:
                        message.registrationId = reader.readUint32();
                        break;
                    case 1:
                        message.preKeyId = reader.readUint32();
                        break;
                    case 6:
                        message.signedPreKeyId = reader.readUint32();
                        break;
                    case 2:
                        message.baseKey = reader.readBytes();
                        break;
                    case 3:
                        message.identityKey = reader.readBytes();
                        break;
                    case 4:
                        message.message = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PreKeyWhisperMessage {
            return PreKeyWhisperMessage.deserialize(bytes);
        }
    }
    export class KeyExchangeMessage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            baseKey?: Uint8Array;
            ephemeralKey?: Uint8Array;
            identityKey?: Uint8Array;
            baseKeySignature?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("baseKey" in data && data.baseKey != undefined) {
                    this.baseKey = data.baseKey;
                }
                if ("ephemeralKey" in data && data.ephemeralKey != undefined) {
                    this.ephemeralKey = data.ephemeralKey;
                }
                if ("identityKey" in data && data.identityKey != undefined) {
                    this.identityKey = data.identityKey;
                }
                if ("baseKeySignature" in data && data.baseKeySignature != undefined) {
                    this.baseKeySignature = data.baseKeySignature;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_id() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get baseKey() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set baseKey(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_baseKey() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get ephemeralKey() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set ephemeralKey(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_ephemeralKey() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get identityKey() {
            return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array(0)) as Uint8Array;
        }
        set identityKey(value: Uint8Array) {
            pb_1.Message.setField(this, 4, value);
        }
        get has_identityKey() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get baseKeySignature() {
            return pb_1.Message.getFieldWithDefault(this, 5, new Uint8Array(0)) as Uint8Array;
        }
        set baseKeySignature(value: Uint8Array) {
            pb_1.Message.setField(this, 5, value);
        }
        get has_baseKeySignature() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            id?: number;
            baseKey?: Uint8Array;
            ephemeralKey?: Uint8Array;
            identityKey?: Uint8Array;
            baseKeySignature?: Uint8Array;
        }): KeyExchangeMessage {
            const message = new KeyExchangeMessage({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.baseKey != null) {
                message.baseKey = data.baseKey;
            }
            if (data.ephemeralKey != null) {
                message.ephemeralKey = data.ephemeralKey;
            }
            if (data.identityKey != null) {
                message.identityKey = data.identityKey;
            }
            if (data.baseKeySignature != null) {
                message.baseKeySignature = data.baseKeySignature;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                baseKey?: Uint8Array;
                ephemeralKey?: Uint8Array;
                identityKey?: Uint8Array;
                baseKeySignature?: Uint8Array;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.baseKey != null) {
                data.baseKey = this.baseKey;
            }
            if (this.ephemeralKey != null) {
                data.ephemeralKey = this.ephemeralKey;
            }
            if (this.identityKey != null) {
                data.identityKey = this.identityKey;
            }
            if (this.baseKeySignature != null) {
                data.baseKeySignature = this.baseKeySignature;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_id)
                writer.writeUint32(1, this.id);
            if (this.has_baseKey && this.baseKey.length)
                writer.writeBytes(2, this.baseKey);
            if (this.has_ephemeralKey && this.ephemeralKey.length)
                writer.writeBytes(3, this.ephemeralKey);
            if (this.has_identityKey && this.identityKey.length)
                writer.writeBytes(4, this.identityKey);
            if (this.has_baseKeySignature && this.baseKeySignature.length)
                writer.writeBytes(5, this.baseKeySignature);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): KeyExchangeMessage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new KeyExchangeMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readUint32();
                        break;
                    case 2:
                        message.baseKey = reader.readBytes();
                        break;
                    case 3:
                        message.ephemeralKey = reader.readBytes();
                        break;
                    case 4:
                        message.identityKey = reader.readBytes();
                        break;
                    case 5:
                        message.baseKeySignature = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): KeyExchangeMessage {
            return KeyExchangeMessage.deserialize(bytes);
        }
    }
}
